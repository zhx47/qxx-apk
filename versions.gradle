import java.util.regex.Matcher
import java.util.regex.Pattern

def build_versions = [:]
build_versions.version_code = 1
build_versions.version_name = "3.0.2"
build_versions.min_sdk = 24
build_versions.target_sdk = 33
build_versions.build_tools = "33.0.1"
ext.build_versions = build_versions

ext.deps = [:]
def versions = [:]
versions.android_gradle_plugin = '7.2.2'
versions.android_maven_gradle_plugin = "2.1"
versions.annotation = "1.3.0"
versions.androidx = "1.4.1"
versions.recyclerview = "1.2.1"
versions.material = "1.5.0"
versions.junit = "4.13.2"
versions.rxjava2 = "2.2.21"
versions.rxandroid = "2.1.1"
versions.gson = "2.10.1" //https://github.com/google/gson
versions.okhttp3 = "3.12.13" //不可升级，为了支持 API 19
versions.kotlin = '1.7.21'

//========xlibrary start========//
versions.xui = "1.2.2"
versions.xutil = "2.0.0"
versions.xpage = "3.3.0"
versions.xrouter = "1.0.1"
//========xlibrary end========//

ext.versions = versions

def deps = [:]

def androidx = [:]
androidx.appcompat = "androidx.appcompat:appcompat:$versions.androidx"
androidx.recyclerview = "androidx.recyclerview:recyclerview:$versions.recyclerview"
androidx.design = "com.google.android.material:material:$versions.material"
deps.androidx = androidx

deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"
deps.android_maven_gradle_plugin = "com.github.dcendents:android-maven-gradle-plugin:$versions.android_maven_gradle_plugin"
deps.junit = "junit:junit:$versions.junit"
deps.rxandroid = "io.reactivex.rxjava2:rxandroid:$versions.rxandroid"
deps.gson = "com.google.code.gson:gson:$versions.gson"
deps.okhttp3 = "com.squareup.okhttp3:okhttp:$versions.okhttp3"

//========xlibrary start=================//
def xlibrary = [:]
xlibrary.xui = "com.github.pppscn:XUI:$versions.xui" //com.github.xuexiangjys:XUI
xlibrary.xutil_core = "com.github.xuexiangjys.XUtil:xutil-core:$versions.xutil"
xlibrary.xutil_sub = "com.github.xuexiangjys.XUtil:xutil-sub:$versions.xutil"
xlibrary.xpage_lib = "com.github.xuexiangjys.XPage:xpage-lib:$versions.xpage"
xlibrary.xpage_compiler = "com.github.xuexiangjys.XPage:xpage-compiler:$versions.xpage"
xlibrary.xrouter_runtime = "com.github.xuexiangjys.XRouter:xrouter-runtime:$versions.xrouter"
xlibrary.xrouter_compiler = "com.github.xuexiangjys.XRouter:xrouter-compiler:$versions.xrouter"
xlibrary.xrouter_plugin = "com.github.xuexiangjys.XRouter:xrouter-plugin:$versions.xrouter"
deps.xlibrary = xlibrary
//========xlibrary end=================//
ext.deps = deps

/**
 * @return 是否为release
 */
def isRelease() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern
    if (tskReqStr.contains("assemble")) {
        println tskReqStr
        pattern = Pattern.compile("assemble(\\w*)(Release|Debug)")
    } else {
        pattern = Pattern.compile("generate(\\w*)(Release|Debug)")
    }
    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find()) {
        String task = matcher.group(0).toLowerCase()
        println("[BuildType] Current task: " + task)
        return task.contains("release")
    } else {
        println "[BuildType] NO MATCH FOUND"
        return true
    }
}
ext.isRelease = this.&isRelease

//默认添加代码仓库路径
static def addRepos(RepositoryHandler handler) {
    handler.mavenLocal()
    handler.google()
    handler.mavenCentral()
    handler.maven { url 'https://maven.aliyun.com/repository/google' }
    handler.maven { url 'https://maven.aliyun.com/repository/central' }
    handler.maven { url 'https://maven.aliyun.com/repository/public' }
    handler.maven { url "https://repo1.maven.org/maven2/" }
    handler.maven { url 'https://oss.sonatype.org/content/repositories/public' }
    handler.maven { url "https://jitpack.io" }
    //Add the Local repository
    handler.maven { url 'LocalRepository' }
}

ext.addRepos = this.&addRepos

//自动添加XRouter插件
project.buildscript.configurations.each { configuration ->
    def dependencies = getProject().dependencies
    if (configuration.name == "classpath") {
        //XRouter插件
        configuration.dependencies.add(dependencies.create(deps.xlibrary.xrouter_plugin))
        //kotlin插件
        configuration.dependencies.add(dependencies.create("org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"))
    }
}